@page "/admin/adduser"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using MecuryProduct.Data
@using System.Security.Claims

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject CompanyService CompanyService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HelperService HelperService

<PageTitle>Add User</PageTitle>

<a onclick="history.back();">
    <RadzenButton Variant="Variant.Flat" Style="margin-bottom: 20px;">
        <RadzenIcon Icon="arrow_back" />
    </RadzenButton>
</a>

<h1>Add User</h1>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email <span style="color: red;">*</span></label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password <span style="color: red;">*</span></label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password <span style="color: red;">*</span></label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="Input.Role" TValue="string" class="form-control" aria-required="true">
                    <option value="">Select Role</option>
                    <option value="Manager">Manager</option>
                    <option value="Employee">Employee</option>
                    <option value="Driver">Driver</option>
                </InputSelect>
                <label for="role">Role<span style="color: red;">*</span></label>
                <ValidationMessage For="() => Input.Role" class="text-danger" />
            </div>
            @if (Input.Role == "Employee" || Input.Role == "Driver")
            {
                <div class="form-floating mb-3">
                    <RadzenDropDown Multiple class="form-control" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    FilterOperator="StringFilterOperator.Contains" AllowFiltering="true" @bind-Value="@selected_companies"
                                    Data="@companies" TextProperty="Name" ValueProperty="Id" Style="width: 100%;" Name="Model" />
                    <label for="role">Company<span style="color: red;">*</span></label>
                    <ValidationMessage For="() => Input.CompanyId" class="text-danger" />
                </div>
            }
            @if (Input.Role == "Employee")
            {
                <div class="form-floating mb-3">
                    <RadzenDropDown Multiple class="form-control" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    FilterOperator="StringFilterOperator.Contains" AllowFiltering="true" @bind-Value="@selected_permissions"
                                    Data="@permissions" Style="width: 100%;" Name="Model" />
                    <label for="role">Permissions<span style="color: red;">*</span></label>
                    <ValidationMessage For="() => selected_permissions" class="text-danger" />
                </div>
            }
            <button type="submit" class="w-100 btn btn-lg btn-primary">Add User</button>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public List<CompanyModel> companies = new List<CompanyModel>();
    public List<int> selected_companies = new List<int>();
    public List<string> permissions = new List<string>
    {
        "User Module",
        "Customer Module",
        "Vehicle Module",
        "Driver Module",
        "Calendar & Map Module",
        "Inventory Module",
        "Product Module",
        "Cashier Module",
        "Sales Module",
        "Localization Module"
    };
    public List<string> selected_permissions = new List<string>();

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        companies = CompanyService.GetCompanies();
    }

    public async Task RegisterUser(EditContext editContext)
    {
        try
        {
            var user = CreateUser();

            var exists = await UserStore.FindByNameAsync(Input.Email.ToUpper(), CancellationToken.None);

            if (exists != null)
            {
                var notificationMessage = new NotificationMessage { Severity = NotificationSeverity.Error, Detail = "User with this email already exists", Duration = 4000 };
                NotificationService.Notify(notificationMessage);
                HelperService.WriteLog(exception: "User with this email already exists");
                await DialogService.OpenAsync<UpdateUserModal>("Update User",
                    new Dictionary<string, object>() { { "UserId", exists.Id } },
                    new DialogOptions() { Width = "600px", Height = "60%", Resizable = true, Draggable = true }
                );
                StateHasChanged();
                return;
            }

            await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
            var emailStore = GetEmailStore();
            await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
            var result = await UserManager.CreateAsync(user, Input.Password);

            if (!result.Succeeded)
            {
                identityErrors = result.Errors;
                return;
            }

            var userId = await UserManager.GetUserIdAsync(user);
            UserService.SetUserPassword(userId, Input.Password);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            await UserManager.ConfirmEmailAsync(user, code);
            await UserManager.AddClaimAsync(user, new Claim("Role", Input.Role));
            UserService.SetDriverId(userId);
            UserService.SetOldThreePasswords(userId, Input.Password);

            if (Input.Role != "Manager")
            {
                foreach (var company in selected_companies)
                {
                    if (Input.Role == "Driver")
                    {
                        UserService.SetCompanyDriver(new CompanyDrivers { company_id = company, driver_id = userId });
                    }
                    else if (Input.Role == "Employee")
                    {
                        UserService.SetCompanyEmployees(new CompanyEmployees { company_id = company, employee_id = userId });
                    }
                }
            }
            user.permissions = selected_permissions;

            var max = UserService.GetMaxUserId();

            if (max is not null)
            {
                user.user_id = max.Value + 1;
                UserService.UpdateUser(user);
            }
            else
            {
                user.user_id = 1;
                UserService.UpdateUser(user);
            }

            NavigationManager.NavigateTo("/admin/users");
        }
        catch (Exception ex)
        {
            HelperService.WriteLog(exception: $"{ex}");
            var notificationMessage = new NotificationMessage { Severity = NotificationSeverity.Error, Detail = ex.Message, Duration = 4000 };
            NotificationService.Notify(notificationMessage);
        }
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        [Display(Name = "Role")]
        public string Role { get; set; } = "";

        [Required]
        [Display(Name = "CompanyId")]
        public int CompanyId { get; set; }
    }
}
