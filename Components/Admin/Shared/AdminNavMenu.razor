@using MecuryProduct.Modals
@using System.Globalization

@inject NavigationManager NavigationManager
@inject SessionService SessionService
@inject DialogService DialogService
@inject CompanyService CompanyService
@inject SessionService SessionService

<style>
    .rz-header {
        background-color: @(routes.Find(x => x.Path == currentUrl)?.Color) !important;
    }
</style>

<RadzenHeader>
    <RadzenStack JustifyContent="JustifyContent.SpaceBetween" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
            <RadzenLabel Text="@(textInfo.ToTitleCase(currentUrl.Split('/')[1]))" />
        </RadzenStack>
        <AuthorizeView>
            <Authorized>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                    <div style="display: flex;" class="nav-item px-3 align-items-center justify-content-center">
                        <NavLink class="nav-link" href="help">
                            <RadzenIcon Icon="help" />
                        </NavLink>
                    </div>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="Account/Manage">
                            <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                        </NavLink>
                    </div>
                    <div class="nav-item px-3">
                        <form action="Account/Logout" method="post">
                            <AntiforgeryToken />
                            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary">
                                <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                            </RadzenButton>
                        </form>
                    </div>
                </RadzenStack>
            </Authorized>
            <NotAuthorized>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                    <RadzenLink Path="/account/login">Login</RadzenLink>
                    <RadzenLink Path="/account/register">Register</RadzenLink>
                </RadzenStack>
            </NotAuthorized>
        </AuthorizeView>
    </RadzenStack>
</RadzenHeader>
<RadzenSidebar @bind-Expanded="@sidebar1Expanded">
    <RadzenPanelMenu Multiple>
        <RadzenPanelMenuItem Text="Dashboard" Path="/admin/dashboard" class="rz-color-black" />
        <RadzenPanelMenuItem Text="LMS (Lead Management System)" class="rz-color-black">
            <RadzenPanelMenuItem Text="Users" Path="/admin/users" class="rz-color-black" />
            <RadzenPanelMenuItem Text="Customers" Path="/admin/customers" class="rz-color-black" />
            <RadzenPanelMenuItem Text="Vehicles" Path="/admin/vehicles" class="rz-color-black" />
            <RadzenPanelMenuItem Text="Drivers" Path="/admin/drivers" class="rz-color-black" />
            <RadzenPanelMenuItem Text="Calendar" Path="/admin/calendar" class="rz-color-black" />
            <RadzenPanelMenuItem Text="Inventory" Path="/admin/inventory" class="rz-color-black" />
        </RadzenPanelMenuItem>
        <RadzenPanelMenuItem Text="Administration" class="rz-color-black">
            <RadzenPanelMenuItem Text="Companies" Path="/admin/companies" class="rz-color-black" />
            <RadzenPanelMenuItem Text="Localization" Path="/admin/localization" class="rz-color-black" />
        </RadzenPanelMenuItem>
        <RadzenPanelMenuItem Text="POS (Point Of Sale)" class="rz-color-black">
            <RadzenPanelMenuItem Text="POS" Path="/admin/pos" class="rz-color-black" />
            <RadzenPanelMenuItem Text="Customers" Path="/admin/poscustomers" class="rz-color-black" />
            <RadzenPanelMenuItem Text="Products" Path="/admin/products" class="rz-color-black" />
            <RadzenPanelMenuItem Text="Departments" Path="/admin/departments" class="rz-color-black" />
            <RadzenPanelMenuItem Text="Sales" Path="/admin/sales" class="rz-color-black" />
            <RadzenPanelMenuItem Text="Cash Flow" Path="/admin/cashflow" class="rz-color-black" />
        </RadzenPanelMenuItem>
        @* May be use later *@
     @* <RadzenLink Path="/admin/invoices" Match="NavLinkMatch.All">
            <RadzenPanelMenuItem Text="Invoices" class="rz-color-black" />
        </RadzenLink> *@
        <RadzenPanelMenuItem Text="Logs" Path="/admin/logs" class="rz-color-black" />
    </RadzenPanelMenu>
</RadzenSidebar>

@code {
    bool sidebar1Expanded = true;
    int cartCount = 0;
    public List<CompanyModel> companies = new List<CompanyModel>();
    public int default_company;

    private List<Route> routes = new List<Route>()
    {
        new Route { Color = "#3F79D1", Path = "admin/dashboard" },    // Soft Blue
        new Route { Color = "#4CAF50", Path = "admin/users" },        // Green
        new Route { Color = "#FF7043", Path = "admin/customers" },    // Soft Orange
        new Route { Color = "#8E44AD", Path = "admin/vehicles" },     // Purple
        new Route { Color = "#F57C00", Path = "admin/drivers" },      // Dark Orange
        new Route { Color = "#FF5722", Path = "admin/calendar" },     // Deep Red-Orange
        new Route { Color = "#795548", Path = "admin/inventory" },    // Brown
        new Route { Color = "#009688", Path = "admin/companies" },    // Teal
        new Route { Color = "#391FBB", Path = "admin/localization" }, // Indigo
        new Route { Color = "#D32F2F", Path = "admin/products" },     // Deep Red
        new Route { Color = "#388E3C", Path = "admin/categories" },   // Dark Green
        new Route { Color = "#8E44AD", Path = "admin/pos" },          // Soft Purple
        new Route { Color = "#6C5B7B", Path = "admin/sales" },        // Muted Violet
        new Route { Color = "#0288D1", Path = "admin/logs" },         // Teal Blue
        new Route { Color = "#00796B", Path = "admin/cashflow" },     // Deep Teal
    };

    private string currentUrl = "";
    TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;

    protected override async void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        companies = CompanyService.GetCompanies();

        var company_in_session = await SessionService.Get<int?>("company");

        if (company_in_session is not null)
        {
            default_company = (int)company_in_session;
        }
        else
        {
            if (companies?.Count() > 0)
            {
                await SessionService.Set("company", companies[0].Id.ToString());
                default_company = companies[0].Id;
            }
        }


        var products = await SessionService.Get<List<ProductModel>>("cart") ?? new List<ProductModel>();

        cartCount = products.Count();
    }

    public async void ChangeCompany(CompanyModel item)
    {
        await SessionService.Set("company", item.Id.ToString());
        default_company = item.Id;
        NavigationManager.Refresh(true);
        StateHasChanged();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    public async void OpenCartModal()
    {
        await DialogService.OpenAsync<CartModal>("Cart",
            new Dictionary<string, object>() {  },
            new DialogOptions() { Width = "600px", Height = "100%", Left = "0", CloseDialogOnOverlayClick = true, Resizable = true, Draggable = true }
        );
        StateHasChanged();
    }

    private sealed class Route
    {
        public string Color { get; set; } = string.Empty;
        public string Path { get; set; } = string.Empty;
    }
}